---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "ElevateApi-production"
host: "api.elevateapp.cc"
schemes:
- "https"
paths:
  /v1.1/community/event:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "favourites"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfEvent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.favourites: "method.request.querystring.favourites"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "favourites"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.favourites: "method.request.querystring.favourites"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/community/event/{eventId}/like:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/community/group:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "member"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfGroup"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.member: "method.request.querystring.member"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/group"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "member"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.member: "method.request.querystring.member"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/group"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/community/interest:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfContentCategory"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL5dd157"
        required: true
        schema:
          $ref: "#/definitions/MODEL5dd157"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/community/user:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfUser"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
        uri: "https://${stageVariables.baseUrl}/v1.1/community/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/feed/property/{propertyId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfFeedMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
        uri: "https://${stageVariables.baseUrl}/v1.1/feed/property/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
        uri: "https://${stageVariables.baseUrl}/v1.1/feed/property/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/feed/property/{propertyId}/configuration:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfFeedMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/feed/property/{propertyId}/configuration"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "ArrayOfMODEL43f423"
        required: true
        schema:
          $ref: "#/definitions/ArrayOfMODEL43f423"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfFeedMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/feed/property/{propertyId}/configuration"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/feed/property/{propertyId}/configuration"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/payment/{propertyId}/provider:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfCard"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
        uri: "https://${stageVariables.baseUrl}/v1.1/payment/{propertyId}/provider"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "providerId"
        in: "query"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "MODELb9031a"
        required: true
        schema:
          $ref: "#/definitions/MODELb9031a"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Card"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.querystring.providerId: "method.request.querystring.providerId"
        uri: "https://${stageVariables.baseUrl}/v1.1/payment/{propertyId}/provider"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "providerId"
        in: "query"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.querystring.providerId: "method.request.querystring.providerId"
        uri: "https://${stageVariables.baseUrl}/v1.1/payment/{propertyId}/provider"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}:
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "providerId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      - name: "paymentMethodId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MODELf5db"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.providerId: "method.request.path.providerId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.path.paymentMethodId: "method.request.path.paymentMethodId"
        uri: "https://${stageVariables.baseUrl}/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "providerId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      - name: "paymentMethodId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.providerId: "method.request.path.providerId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.path.paymentMethodId: "method.request.path.paymentMethodId"
        uri: "https://${stageVariables.baseUrl}/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.1/profile:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Profile"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/profile"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL48a1cc"
        required: true
        schema:
          $ref: "#/definitions/MODEL48a1cc"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Profile"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/profile"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.1/profile"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.2/community/property/{propertyId}/event:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "favourites"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfEvent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.favourites: "method.request.querystring.favourites"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELa7ae0a"
        required: true
        schema:
          $ref: "#/definitions/MODELa7ae0a"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfEvent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "favourites"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.favourites: "method.request.querystring.favourites"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.2/community/property/{propertyId}/event/{eventId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfEvent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELcecf3c"
        required: true
        schema:
          $ref: "#/definitions/MODELcecf3c"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfEvent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfEvent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.2/community/property/{propertyId}/event/{eventId}/like:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.2/community/property/{propertyId}/group:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "member"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfGroup"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.member: "method.request.querystring.member"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/group"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "member"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.member: "method.request.querystring.member"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/group"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.2/community/property/{propertyId}/interest:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfContentCategory"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELb7e63c"
        required: true
        schema:
          $ref: "#/definitions/MODELb7e63c"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1.2/community/property/{propertyId}/user:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "favourites"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfUser"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.favourites: "method.request.querystring.favourites"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "favourites"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.favourites: "method.request.querystring.favourites"
        uri: "https://${stageVariables.baseUrl}/v1.2/community/property/{propertyId}/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/auth/password:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODELe92290"
        required: true
        schema:
          $ref: "#/definitions/MODELe92290"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/auth/password"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/auth/password"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/auth/retrieveLink:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "url"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.url: "method.request.querystring.url"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/auth/retrieveLink"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "url"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.url: "method.request.querystring.url"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/auth/retrieveLink"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/beacon/devices:
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODELca4fe6"
        required: true
        schema:
          $ref: "#/definitions/MODELca4fe6"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BeaconInfo"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/beacon/devices"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/beacon/devices"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfBooking"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/property/{propertyId}/booking:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfBooking"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/property/{propertyId}/booking/{bookingId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Booking"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/booking/{bookingId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/booking/{bookingId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/property/{propertyId}/space:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "attendeesCount"
        in: "query"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "date"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfSpace"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.attendeesCount: "method.request.querystring.attendeesCount"
          integration.request.querystring.date: "method.request.querystring.date"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "attendeesCount"
        in: "query"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "date"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.attendeesCount: "method.request.querystring.attendeesCount"
          integration.request.querystring.date: "method.request.querystring.date"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/property/{propertyId}/space/{spaceId}/package:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "attendeesCount"
        in: "query"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      - name: "date"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfSpacePackage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.attendeesCount: "method.request.querystring.attendeesCount"
          integration.request.querystring.date: "method.request.querystring.date"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space/{spaceId}/package"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "attendeesCount"
        in: "query"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      - name: "date"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.attendeesCount: "method.request.querystring.attendeesCount"
          integration.request.querystring.date: "method.request.querystring.date"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space/{spaceId}/package"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/property/{propertyId}/space/{spaceId}/price:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SpacePrice"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space/{spaceId}/price"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL30d365"
        required: true
        schema:
          $ref: "#/definitions/MODEL30d365"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SpacePrice"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space/{spaceId}/price"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/property/{propertyId}/space/{spaceId}/price"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/{bookingId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Booking"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/{bookingId}/attendees:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BookingAttendee"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/attendees"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/attendees"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/{bookingId}/attendees/notify:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELb0b075"
        required: true
        schema:
          $ref: "#/definitions/MODELb0b075"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/attendees/notify"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/attendees/notify"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/{bookingId}/invite:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfBookingInvite"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/invite"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL32efc9"
        required: true
        schema:
          $ref: "#/definitions/MODEL32efc9"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/invite"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/invite"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/booking/{bookingId}/invite/{inviteIds}:
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "inviteIds"
        in: "path"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
          integration.request.path.inviteIds: "method.request.path.inviteIds"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/invite/{inviteIds}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "inviteIds"
        in: "path"
        required: true
        type: "string"
      - name: "bookingId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.bookingId: "method.request.path.bookingId"
          integration.request.path.inviteIds: "method.request.path.inviteIds"
        uri: "https://${stageVariables.baseUrl}/v1/booking/{bookingId}/invite/{inviteIds}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/cafe/property/{propertyId}/vendor/{vendorId}/menu:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/chat/token/{channelType}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "channelType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ChatToken"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.channelType: "method.request.path.channelType"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/chat/token/{channelType}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "channelType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.channelType: "method.request.path.channelType"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/chat/token/{channelType}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/community/event:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "searchText"
        in: "query"
        required: false
        type: "string"
      - name: "onlyFavourites"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.onlyFavourites: "method.request.querystring.onlyFavourites"
          integration.request.querystring.searchText: "method.request.querystring.searchText"
        uri: "https://${stageVariables.baseUrl}/v1/community/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "searchText"
        in: "query"
        required: false
        type: "string"
      - name: "onlyFavourites"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.onlyFavourites: "method.request.querystring.onlyFavourites"
          integration.request.querystring.searchText: "method.request.querystring.searchText"
        uri: "https://${stageVariables.baseUrl}/v1/community/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/community/event/{eventId}/like:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/community/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/community/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/community/event/{eventId}/like"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/community/group:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "myGroups"
        in: "query"
        required: false
        type: "string"
      - name: "searchText"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfGroup"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.myGroups: "method.request.querystring.myGroups"
          integration.request.querystring.searchText: "method.request.querystring.searchText"
        uri: "https://${stageVariables.baseUrl}/v1/community/group"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "myGroups"
        in: "query"
        required: false
        type: "string"
      - name: "searchText"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.myGroups: "method.request.querystring.myGroups"
          integration.request.querystring.searchText: "method.request.querystring.searchText"
        uri: "https://${stageVariables.baseUrl}/v1/community/group"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/community/interest:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfContentCategory"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/community/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODELdaa885"
        required: true
        schema:
          $ref: "#/definitions/MODELdaa885"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/community/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/community/interest"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/community/user:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "searchText"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfUser"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.searchText: "method.request.querystring.searchText"
        uri: "https://${stageVariables.baseUrl}/v1/community/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "searchText"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.searchText: "method.request.querystring.searchText"
        uri: "https://${stageVariables.baseUrl}/v1/community/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/concierge/chat/token/{channelType}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "channelType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ChatToken"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.channelType: "method.request.path.channelType"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/chat/token/{channelType}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "channelType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.channelType: "method.request.path.channelType"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/chat/token/{channelType}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}:
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "messageId"
        in: "path"
        required: true
        type: "string"
      - name: "chatUniqueName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ChatToken"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.chatUniqueName: "method.request.path.chatUniqueName"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.messageId: "method.request.path.messageId"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "messageId"
        in: "path"
        required: true
        type: "string"
      - name: "chatUniqueName"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.chatUniqueName: "method.request.path.chatUniqueName"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.messageId: "method.request.path.messageId"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/concierge/property/{propertyId}/chat/{channelType}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "channelType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ConciergeChatInfo"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.channelType: "method.request.path.channelType"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/chat/{channelType}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "channelType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.channelType: "method.request.path.channelType"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/chat/{channelType}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/concierge/property/{propertyId}/info:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ConciergeInfo"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/info"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL8375dc"
        required: true
        schema:
          $ref: "#/definitions/MODEL8375dc"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ConciergeInfo"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/info"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/info"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/concierge/property/{propertyId}/user/{userId}/card:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UserCard"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/user/{userId}/card"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL55836f"
        required: true
        schema:
          $ref: "#/definitions/MODEL55836f"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UserCard"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/user/{userId}/card"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/concierge/property/{propertyId}/user/{userId}/card"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/event:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "read"
        in: "query"
        required: false
        type: "string"
      - name: "startDate"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.read: "method.request.querystring.read"
          integration.request.querystring.endDate: "method.request.querystring.endDate"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.startDate: "method.request.querystring.startDate"
        uri: "https://${stageVariables.baseUrl}/v1/event/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "read"
        in: "query"
        required: false
        type: "string"
      - name: "startDate"
        in: "query"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.read: "method.request.querystring.read"
          integration.request.querystring.endDate: "method.request.querystring.endDate"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.startDate: "method.request.querystring.startDate"
        uri: "https://${stageVariables.baseUrl}/v1/event/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/event/{eventId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/event/{eventId}/userState:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/event/{eventId}/userState"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL62ab3b"
        required: true
        schema:
          $ref: "#/definitions/MODEL62ab3b"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/event/{eventId}/userState"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/event/{eventId}/userState"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/property/{eventPropertyId}/event:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "read"
        in: "query"
        required: false
        type: "string"
      - name: "startDate"
        in: "query"
        required: false
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.querystring.read: "method.request.querystring.read"
          integration.request.querystring.endDate: "method.request.querystring.endDate"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.startDate: "method.request.querystring.startDate"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL03f6b4"
        required: true
        schema:
          $ref: "#/definitions/MODEL03f6b4"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "read"
        in: "query"
        required: false
        type: "string"
      - name: "startDate"
        in: "query"
        required: false
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      - name: "filter"
        in: "query"
        required: false
        type: "string"
      - name: "endDate"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.querystring.read: "method.request.querystring.read"
          integration.request.querystring.endDate: "method.request.querystring.endDate"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.startDate: "method.request.querystring.startDate"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/property/{eventPropertyId}/event/{eventId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL5e797a"
        required: true
        schema:
          $ref: "#/definitions/MODEL5e797a"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/property/{eventPropertyId}/event/{eventId}/share:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL86e8f2"
        required: true
        schema:
          $ref: "#/definitions/MODEL86e8f2"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "ArrayOfMODEL5deec2"
        required: true
        schema:
          $ref: "#/definitions/ArrayOfMODEL5deec2"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "eventPropertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.eventPropertyId: "method.request.path.eventPropertyId"
          integration.request.path.eventId: "method.request.path.eventId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/feed:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfFeedMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
        uri: "https://${stageVariables.baseUrl}/v1/feed"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
        uri: "https://${stageVariables.baseUrl}/v1/feed"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/landlord:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/landlord"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/landlord"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/landlord/{landlordId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "landlordId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.landlordId: "method.request.path.landlordId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/landlord/{landlordId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "landlordId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL02dd72"
        required: true
        schema:
          $ref: "#/definitions/MODEL02dd72"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.landlordId: "method.request.path.landlordId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/landlord/{landlordId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "landlordId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.landlordId: "method.request.path.landlordId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/landlord/{landlordId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/message:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfMessage"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
        uri: "https://${stageVariables.baseUrl}/v1/message"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
        uri: "https://${stageVariables.baseUrl}/v1/message"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/message/resource/{resourceType}/{resourceId}/multicast:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "roleId"
        in: "query"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL5b837d"
        required: true
        schema:
          $ref: "#/definitions/MODEL5b837d"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.roleId: "method.request.querystring.roleId"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/message/resource/{resourceType}/{resourceId}/multicast"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "roleId"
        in: "query"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.roleId: "method.request.querystring.roleId"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/message/resource/{resourceType}/{resourceId}/multicast"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/message/{messageId}:
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "messageId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELf73a7f"
        required: true
        schema:
          $ref: "#/definitions/MODELf73a7f"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.messageId: "method.request.path.messageId"
        uri: "https://${stageVariables.baseUrl}/v1/message/{messageId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "messageId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.messageId: "method.request.path.messageId"
        uri: "https://${stageVariables.baseUrl}/v1/message/{messageId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/notification/status:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/notification/status"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/notification/status"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/notification/subscription:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODELb5b449"
        required: true
        schema:
          $ref: "#/definitions/MODELb5b449"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/notification/subscription"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL396417"
        required: true
        schema:
          $ref: "#/definitions/MODEL396417"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/notification/subscription"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/notification/subscription"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/order/booking:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfOrderViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
        uri: "https://${stageVariables.baseUrl}/v1/order/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODELf2e024"
        required: true
        schema:
          $ref: "#/definitions/MODELf2e024"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BookingConfirmation"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/order/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
        uri: "https://${stageVariables.baseUrl}/v1/order/booking"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/order/booking/{orderId}:
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BookingConfirmation"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/order/booking/{orderId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/order/booking/{orderId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/order/cafe:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/OrderViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
        uri: "https://${stageVariables.baseUrl}/v1/order/cafe"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODELed4335"
        required: true
        schema:
          $ref: "#/definitions/MODELed4335"
      responses:
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        201:
          description: "201 response"
          schema:
            $ref: "#/definitions/CafeOrderViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          201:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/order/cafe"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: false
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
        uri: "https://${stageVariables.baseUrl}/v1/order/cafe"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/order/vendor/{vendorId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/OrderViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "pageNumber"
        in: "query"
        required: false
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - name: "pageSize"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.pageSize: "method.request.querystring.pageSize"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.pageNumber: "method.request.querystring.pageNumber"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/order/vendor/{vendorId}/order/{orderId}/details:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CafeOrderDetailsViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}/order/{orderId}/details"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}/order/{orderId}/details"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/order/vendor/{vendorId}/order/{orderId}/status:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CafeOrderViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}/order/{orderId}/status"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL50521e"
        required: true
        schema:
          $ref: "#/definitions/MODEL50521e"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CafeOrderViewModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}/order/{orderId}/status"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "orderId"
        in: "path"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.orderId: "method.request.path.orderId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/order/vendor/{vendorId}/order/{orderId}/status"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payment/property/{propertyId}/stripe/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PaymentStripeConfiguration"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/payment/property/{propertyId}/stripe/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELafb641"
        required: true
        schema:
          $ref: "#/definitions/MODELafb641"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PaymentStripeConfiguration"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/payment/property/{propertyId}/stripe/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/payment/property/{propertyId}/stripe/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payment/tenant/{tenantId}/houseAccount/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PaymentHouseAccountConfiguration"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/tenant/{tenantId}/houseAccount/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL747e86"
        required: true
        schema:
          $ref: "#/definitions/MODEL747e86"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PaymentHouseAccountConfiguration"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/tenant/{tenantId}/houseAccount/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/tenant/{tenantId}/houseAccount/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payment/{propertyId}/provider:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfCard"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
        uri: "https://${stageVariables.baseUrl}/v1/payment/{propertyId}/provider"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "providerId"
        in: "query"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "MODELa967bf"
        required: true
        schema:
          $ref: "#/definitions/MODELa967bf"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Card"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.querystring.providerId: "method.request.querystring.providerId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/{propertyId}/provider"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "providerId"
        in: "query"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.querystring.providerId: "method.request.querystring.providerId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/{propertyId}/provider"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}:
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "providerId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      - name: "paymentMethodId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MODELf5db"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.providerId: "method.request.path.providerId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.path.paymentMethodId: "method.request.path.paymentMethodId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "providerId"
        in: "path"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "module"
        in: "query"
        required: true
        type: "string"
      - name: "paymentMethodId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.providerId: "method.request.path.providerId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.module: "method.request.querystring.module"
          integration.request.path.paymentMethodId: "method.request.path.paymentMethodId"
        uri: "https://${stageVariables.baseUrl}/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/permission/permission:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "permissionFilter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PermissionArray"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.permissionFilter: "method.request.querystring.permissionFilter"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/permission/permission"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "permissionFilter"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.permissionFilter: "method.request.querystring.permissionFilter"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/permission/permission"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/permission/role:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RoleArray"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.resourceType: "method.request.querystring.resourceType"
        uri: "https://${stageVariables.baseUrl}/v1/permission/role"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.resourceType: "method.request.querystring.resourceType"
        uri: "https://${stageVariables.baseUrl}/v1/permission/role"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/permission/{resourceType}/{resourceId}/user:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "fullName"
        in: "query"
        required: false
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResourceUserArray"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.fullName: "method.request.querystring.fullName"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "ArrayOfMODEL53d580"
        required: true
        schema:
          $ref: "#/definitions/ArrayOfMODEL53d580"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResourceUserArray"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "fullName"
        in: "query"
        required: false
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.fullName: "method.request.querystring.fullName"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/permission/{resourceType}/{resourceId}/user/export:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CsvContent"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/export"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/export"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/permission/{resourceType}/{resourceId}/user/{userId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResourceUser"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/{userId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELb60546"
        required: true
        schema:
          $ref: "#/definitions/MODELb60546"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResourceUserArray"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/{userId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/{userId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/{userId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResourceUserArray"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.userId: "method.request.path.userId"
        uri: "https://${stageVariables.baseUrl}/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/profile:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Profile"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/profile"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL63913f"
        required: true
        schema:
          $ref: "#/definitions/MODEL63913f"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Profile"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/profile"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/profile"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "landlordId"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.landlordId: "method.request.querystring.landlordId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "landlordId"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL458ab9"
        required: true
        schema:
          $ref: "#/definitions/MODEL458ab9"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.landlordId: "method.request.querystring.landlordId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "landlordId"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.landlordId: "method.request.querystring.landlordId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELcdf6eb"
        required: true
        schema:
          $ref: "#/definitions/MODELcdf6eb"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/beacon:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "uuid"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "major"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfBeacon"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.major: "method.request.querystring.major"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.uuid: "method.request.querystring.uuid"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beacon"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "uuid"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "major"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.querystring.major: "method.request.querystring.major"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.uuid: "method.request.querystring.uuid"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beacon"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/beaconpoint:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfBeaconPoint"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELe88f91"
        required: true
        schema:
          $ref: "#/definitions/MODELe88f91"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BeaconPoint"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/beaconpoint/{beaconPointId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "beaconPointId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BeaconPoint"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.beaconPointId: "method.request.path.beaconPointId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "beaconPointId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL65471a"
        required: true
        schema:
          $ref: "#/definitions/MODEL65471a"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/BeaconPoint"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.beaconPointId: "method.request.path.beaconPointId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "beaconPointId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfBeaconPoint"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.beaconPointId: "method.request.path.beaconPointId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "beaconPointId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.path.beaconPointId: "method.request.path.beaconPointId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PropertyConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELa2b95f"
        required: true
        schema:
          $ref: "#/definitions/MODELa2b95f"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PropertyConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/contact:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfContact"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL65065d"
        required: true
        schema:
          $ref: "#/definitions/MODEL65065d"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Contact"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/contact/{contactId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "contactId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Contact"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.contactId: "method.request.path.contactId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact/{contactId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "contactId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL811ad0"
        required: true
        schema:
          $ref: "#/definitions/MODEL811ad0"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Contact"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.contactId: "method.request.path.contactId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact/{contactId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "contactId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfContact"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.contactId: "method.request.path.contactId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact/{contactId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "contactId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.contactId: "method.request.path.contactId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/contact/{contactId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/space:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfSpace"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL9dcaeb"
        required: true
        schema:
          $ref: "#/definitions/MODEL9dcaeb"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Space"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/space/{spaceId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Space"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL681cfe"
        required: true
        schema:
          $ref: "#/definitions/MODEL681cfe"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Space"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ArrayOfSpace"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/property/{propertyId}/space/{spaceId}/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SpaceConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELd85bde"
        required: true
        schema:
          $ref: "#/definitions/MODELd85bde"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SpaceConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - name: "spaceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.spaceId: "method.request.path.spaceId"
        uri: "https://${stageVariables.baseUrl}/v1/property/{propertyId}/space/{spaceId}/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/resource:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Property"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/resource"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/resource"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/invitation:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/InvitationToken"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/mobileId:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL1f0770"
        required: true
        schema:
          $ref: "#/definitions/MODEL1f0770"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/mobileId"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/mobileId"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/property/{propertyId}/hid/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SecurityConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELca37b8"
        required: true
        schema:
          $ref: "#/definitions/MODELca37b8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SecurityConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/property/{propertyId}/hid/invitation:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/InvitationToken"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/property/{propertyId}/hid/mobileId:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELfee687"
        required: true
        schema:
          $ref: "#/definitions/MODELfee687"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/mobileId"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/mobileId"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/property/{propertyId}/hid/publicConfig:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SecurityConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/publicConfig"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/hid/publicConfig"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/property/{propertyId}/invitation:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/InvitationToken"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/invitation"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/security/property/{propertyId}/mobileId:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL757582"
        required: true
        schema:
          $ref: "#/definitions/MODEL757582"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/mobileId"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.propertyId: "method.request.path.propertyId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/security/property/{propertyId}/mobileId"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/static/{resourceType}/{resourceId}/uploadPermission:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "contentType"
        in: "query"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - name: "contentLength"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.contentLength: "method.request.querystring.contentLength"
        uri: "https://${stageVariables.baseUrl}/v1/static/{resourceType}/{resourceId}/uploadPermission"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "contentType"
        in: "query"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      - name: "contentLength"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.contentType: "method.request.querystring.contentType"
          integration.request.querystring.contentLength: "method.request.querystring.contentLength"
        uri: "https://${stageVariables.baseUrl}/v1/static/{resourceType}/{resourceId}/uploadPermission"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/stats/{resourceType}/{resourceId}/cafeOrders:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Stats"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/cafeOrders"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/cafeOrders"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/stats/{resourceType}/{resourceId}/doors:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Stats"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/doors"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/doors"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/stats/{resourceType}/{resourceId}/rooms:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Stats"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/rooms"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/rooms"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/stats/{resourceType}/{resourceId}/users:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Stats"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/users"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "path"
        required: true
        type: "string"
      - name: "timePeriod"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.timePeriod: "method.request.querystring.timePeriod"
          integration.request.path.resourceType: "method.request.path.resourceType"
          integration.request.path.resourceId: "method.request.path.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
        uri: "https://${stageVariables.baseUrl}/v1/stats/{resourceType}/{resourceId}/users"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/tenant:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "query"
        required: false
        type: "string"
      - name: "resourceId"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.resourceId: "method.request.querystring.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.resourceType: "method.request.querystring.resourceType"
        uri: "https://${stageVariables.baseUrl}/v1/tenant"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "MODELce3fe6"
        required: true
        schema:
          $ref: "#/definitions/MODELce3fe6"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.propertyId: "method.request.querystring.propertyId"
        uri: "https://${stageVariables.baseUrl}/v1/tenant"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "resourceType"
        in: "query"
        required: false
        type: "string"
      - name: "propertyId"
        in: "query"
        required: true
        type: "string"
      - name: "resourceId"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.resourceId: "method.request.querystring.resourceId"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.propertyId: "method.request.querystring.propertyId"
          integration.request.querystring.resourceType: "method.request.querystring.resourceType"
        uri: "https://${stageVariables.baseUrl}/v1/tenant"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/tenant/{tenantId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/tenant/{tenantId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELffac36"
        required: true
        schema:
          $ref: "#/definitions/MODELffac36"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/tenant/{tenantId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/tenant/{tenantId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "tenantId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.tenantId: "method.request.path.tenantId"
        uri: "https://${stageVariables.baseUrl}/v1/tenant/{tenantId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.propertyId: "method.request.querystring.propertyId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "query"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL268095"
        required: true
        schema:
          $ref: "#/definitions/MODEL268095"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.propertyId: "method.request.querystring.propertyId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "propertyId"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.querystring.propertyId: "method.request.querystring.propertyId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor/{vendorId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL3c2771"
        required: true
        schema:
          $ref: "#/definitions/MODEL3c2771"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "DELETE"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor/{vendorId}/cafe/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/cafe/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELb67465"
        required: true
        schema:
          $ref: "#/definitions/MODELb67465"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/cafe/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/cafe/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor/{vendorId}/catalog:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "enabledOnly"
        in: "query"
        required: false
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.enabledOnly: "method.request.querystring.enabledOnly"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/catalog"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODEL252649"
        required: true
        schema:
          $ref: "#/definitions/MODEL252649"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/catalog"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "enabledOnly"
        in: "query"
        required: false
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.querystring.enabledOnly: "method.request.querystring.enabledOnly"
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/catalog"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor/{vendorId}/ritual/config:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "MODELe1fd4a"
        required: true
        schema:
          $ref: "#/definitions/MODELe1fd4a"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorMenu"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "PUT"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/config"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor/{vendorId}/ritual/merchant:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Merchants"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/merchant"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/merchant"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/vendor/{vendorId}/ritual/publicConfig:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/VendorRitualPublicConfig"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        410:
          description: "410 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        424:
          description: "424 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        449:
          description: "449 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          410:
            statusCode: "410"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          422:
            statusCode: "422"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          424:
            statusCode: "424"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          403:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          404:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          449:
            statusCode: "449"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          409:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/publicConfig"
        passthroughBehavior: "when_no_templates"
        httpMethod: "GET"
        type: "http"
    options:
      parameters:
      - name: "authorization"
        in: "header"
        required: true
        type: "string"
      - name: "vendorId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.authorization: "method.request.header.authorization"
          integration.request.path.vendorId: "method.request.path.vendorId"
        uri: "https://${stageVariables.baseUrl}/v1/vendor/{vendorId}/ritual/publicConfig"
        passthroughBehavior: "when_no_templates"
        httpMethod: "OPTIONS"
        type: "http"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  ConciergeInfo:
    type: "object"
    properties:
      phone:
        type: "string"
      workingHours:
        $ref: "#/definitions/ConciergeWorkingHours"
      questions:
        type: "array"
        items:
          type: "string"
  CsvContent:
    type: "object"
    properties:
      content:
        type: "string"
        description: "Csv-formatted property user table"
      fileName:
        type: "string"
      mimeType:
        type: "string"
  ChatToken:
    type: "object"
    properties:
      token:
        type: "string"
      identity:
        type: "string"
  SpaceConfig:
    type: "object"
    properties:
      theme:
        type: "object"
        properties:
          description:
            type: "string"
          primaryImage:
            type: "string"
          images:
            type: "array"
            items:
              type: "string"
          options:
            type: "array"
            items:
              type: "object"
              properties:
                title:
                  type: "string"
                image:
                  type: "string"
                description:
                  type: "string"
      contactInfo:
        type: "object"
        properties:
          message:
            type: "string"
          info:
            type: "object"
            properties:
              email:
                type: "string"
              phone:
                type: "string"
      bookingConfirmation:
        type: "object"
        properties:
          message:
            type: "string"
  MODELb5b449:
    type: "object"
    required:
    - "deviceId"
    - "deviceToken"
    properties:
      deviceToken:
        type: "string"
        description: "Token generated with APNS"
        minLength: 1
      deviceId:
        type: "string"
        description: "Apple vendor id"
        minLength: 1
      applicationName:
        type: "string"
        description: "AWS APNS Application name"
        minLength: 1
      deviceMode:
        type: "string"
        description: "Not used."
        minLength: 1
  MODEL65065d:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "jobs"
    - "lastName"
    - "phone"
    properties:
      firstName:
        type: "string"
        maxLength: 255
      lastName:
        type: "string"
        maxLength: 255
      email:
        type: "string"
        format: "email"
        maxLength: 255
      phone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
      jobs:
        type: "array"
  MODEL9dcaeb:
    type: "object"
    required:
    - "abbreviation"
    - "floor"
    - "maxAttendees"
    - "minAttendees"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      abbreviation:
        type: "string"
        minLength: 1
        maxLength: 255
      floor:
        type: "string"
        minLength: 1
        maxLength: 255
      minAttendees:
        type: "integer"
        minimum: 0.0
        maximum: 10000.0
      maxAttendees:
        type: "integer"
        minimum: 0.0
        maximum: 10000.0
  SpacePrice:
    type: "object"
    properties:
      id:
        type: "string"
      availableDaysOfWeek:
        type: "integer"
      rate:
        type: "integer"
      basicDuration:
        type: "integer"
      minBookingDuration:
        type: "integer"
      startTime:
        type: "integer"
      endTime:
        type: "integer"
  ArrayOfFeedMessage:
    type: "array"
    items:
      $ref: "#/definitions/Role"
  ArrayOfSpacePackage:
    type: "array"
    items:
      $ref: "#/definitions/SpacePackage"
  ArrayOfSpace:
    type: "array"
    items:
      $ref: "#/definitions/Space"
  Picture:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier for image"
      url:
        type: "string"
        description: "Image URL"
      scale:
        type: "string"
        description: "Image scale"
  MODELed4335:
    type: "object"
    required:
    - "charge"
    - "items"
    - "payment"
    - "propertyId"
    - "vendorId"
    properties:
      vendorId:
        type: "string"
      propertyId:
        type: "string"
      items:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              minLength: 1
            variations:
              type: "array"
              items:
                type: "string"
                minLength: 1
            options:
              type: "array"
              items:
                type: "string"
                minLength: 1
            quantity:
              type: "integer"
              minimum: 1.0
            price:
              type: "integer"
              minimum: 1.0
            comments:
              type: "string"
          required:
          - "id"
          - "options"
          - "price"
          - "quantity"
          - "variations"
      charge:
        type: "object"
        properties:
          total:
            type: "integer"
            minimum: 0.0
          subtotal:
            type: "integer"
            minimum: 0.0
          tax:
            type: "integer"
            minimum: 0.0
        required:
        - "subtotal"
        - "tax"
        - "total"
      payment:
        type: "object"
        properties:
          providerId:
            type: "string"
          paymentMethodId:
            type: "string"
          payload:
            type: "object"
            properties: {}
        required:
        - "providerId"
  Permission:
    type: "object"
    properties:
      permission:
        type: "string"
        description: "Permission name"
      resources:
        type: "array"
        items:
          $ref: "#/definitions/Resource"
    description: "Permission per resource"
  MODELcdf6eb:
    type: "object"
    required:
    - "addressLine1"
    - "city"
    - "coordinates"
    - "country"
    - "email"
    - "name"
    - "phone"
    - "state"
    - "timeZone"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      country:
        type: "string"
        minLength: 1
        maxLength: 255
      state:
        type: "string"
        minLength: 1
        maxLength: 255
      city:
        type: "string"
        minLength: 1
        maxLength: 255
      addressLine1:
        type: "string"
        minLength: 1
        maxLength: 255
      coordinates:
        type: "object"
        properties:
          latitude:
            type: "number"
            minimum: -90.0
            maximum: 90.0
          longitude:
            type: "number"
            minimum: -180.0
            maximum: 180.0
        required:
        - "latitude"
        - "longitude"
      timeZone:
        type: "string"
        minLength: 1
        maxLength: 255
      email:
        type: "string"
        format: "email"
        maxLength: 255
      phone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
  MODEL32efc9:
    type: "object"
    required:
    - "invitees"
    properties:
      invitees:
        type: "array"
        items:
          type: "string"
          format: "email"
          maxLength: 255
  Space:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      abbreviation:
        type: "string"
      floor:
        type: "string"
      minAttendees:
        type: "integer"
      maxAttendees:
        type: "integer"
      compositeName:
        type: "string"
      isCompositeSpace:
        type: "boolean"
      parentSpaceId:
        type: "string"
  MODEL02dd72:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
  MODEL458ab9:
    type: "object"
    required:
    - "addressLine1"
    - "city"
    - "coordinates"
    - "country"
    - "email"
    - "name"
    - "phone"
    - "state"
    - "timeZone"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      country:
        type: "string"
        minLength: 1
        maxLength: 255
      state:
        type: "string"
        minLength: 1
        maxLength: 255
      city:
        type: "string"
        minLength: 1
        maxLength: 255
      addressLine1:
        type: "string"
        minLength: 1
        maxLength: 255
      coordinates:
        type: "object"
        properties:
          latitude:
            type: "number"
            minimum: -90.0
            maximum: 90.0
          longitude:
            type: "number"
            minimum: -180.0
            maximum: 180.0
        required:
        - "latitude"
        - "longitude"
      timeZone:
        type: "string"
        minLength: 1
        maxLength: 255
      email:
        type: "string"
        format: "email"
        maxLength: 255
      phone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
  VendorRitualPublicConfig:
    type: "object"
    properties:
      webViewUrl:
        type: "string"
  Booking:
    type: "object"
    properties:
      id:
        type: "string"
      start:
        type: "integer"
        description: "Reservation start datetime in unix timestamp format"
      end:
        type: "integer"
        description: "Reservation end datetime in unix timestamp format"
      space:
        $ref: "#/definitions/Space"
  MODELca37b8: {}
  ArrayOfUser:
    type: "array"
    items:
      $ref: "#/definitions/User"
  Card:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Card id"
      brand:
        type: "string"
        description: "Card brand"
      last4:
        type: "string"
        description: "Last 4 digits of card"
      isDefault:
        type: "boolean"
        description: "Whether the card is default for some module"
      module:
        type: "string"
        description: "Module name for which the card is default"
  ConciergeWorkingHours:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "string"
        weekDays:
          type: "integer"
        startTime:
          type: "integer"
        endTime:
          type: "integer"
  MODEL55836f:
    type: "object"
  MODELe88f91:
    type: "object"
    required:
    - "major"
    - "minor"
    - "pointTypeId"
    - "uuid"
    properties:
      uuid:
        type: "string"
        maxLength: 36
      major:
        type: "integer"
        minimum: 0.0
        maximum: 65535.0
      minor:
        type: "integer"
        minimum: 0.0
        maximum: 65535.0
      actionId:
        type: "string"
        maxLength: 36
      pointTypeId:
        type: "string"
        maxLength: 36
      location:
        type: "object"
        properties: {}
  Beacon:
    type: "object"
    properties:
      id:
        type: "string"
      typeId:
        type: "string"
      uuid:
        type: "string"
      major:
        type: "integer"
      minor:
        type: "integer"
  PropertyConfig:
    type: "object"
    properties:
      images:
        type: "object"
        description: "Property images"
        properties:
          topBarImage:
            $ref: "#/definitions/Picture"
          launchImage:
            $ref: "#/definitions/Picture"
          backgroundImage:
            $ref: "#/definitions/Picture"
      accentColor:
        type: "string"
        description: "RGB color represented as 8 hex digits"
      backgroundColor:
        type: "string"
        description: "RGB color represented as 8 hex digits"
      topBarColor:
        type: "string"
        description: "RGB color represented as 8 hex digits"
      services:
        type: "array"
        description: "Ordered services descriptors array"
        items:
          $ref: "#/definitions/Service"
    description: "Property specific user interface data"
  OrderViewModel:
    type: "object"
    properties:
      title:
        type: "string"
        description: "Title is the first menu item title"
      timestampCreated:
        type: "integer"
      subTitle:
        type: "string"
        description: "Subtitle is the first menu item comma-separated options"
      status:
        type: "string"
        description: "Status means a readiness of order"
      charge:
        type: "object"
        description: "Cafe order price in cents"
        properties:
          total:
            type: "integer"
            description: "Total amount of charge"
          subtotal:
            type: "integer"
            description: "Subtotal amount of charge"
          tax:
            type: "integer"
            description: "Tax amount of charge"
  MODEL5e797a:
    type: "object"
    required:
    - "details"
    - "endDate"
    - "endTime"
    - "name"
    - "participationPrice"
    - "place"
    - "promotionLevel"
    - "startDate"
    - "startTime"
    properties:
      name:
        type: "string"
        minLength: 1
      startDate:
        type: "integer"
        minimum: 0.0
      endDate:
        type: "integer"
        minimum: 0.0
      startTime:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      endTime:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      participationPrice:
        type: "integer"
        minimum: 0.0
      promotionLevel:
        type: "integer"
      place:
        type: "object"
        properties:
          name:
            type: "string"
            minLength: 1
          coordinates:
            type: "object"
            properties:
              latitude:
                type: "number"
                minimum: -90.0
                maximum: 90.0
              longitude:
                type: "number"
                minimum: -180.0
                maximum: 180.0
            required:
            - "latitude"
            - "longitude"
          addressLine1:
            type: "string"
            minLength: 1
        required:
        - "addressLine1"
        - "coordinates"
        - "name"
      details:
        type: "object"
        properties:
          images:
            type: "array"
            items:
              type: "object"
              properties:
                url:
                  type: "string"
                scale:
                  type: "string"
              required:
              - "scale"
              - "url"
          thumbnail:
            type: "string"
          features:
            type: "array"
            items:
              type: "object"
              properties:
                title:
                  type: "string"
                description:
                  type: "string"
              required:
              - "description"
              - "title"
        required:
        - "features"
        - "images"
  MODELb67465:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
  Group:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      imageUrl:
        type: "string"
      description:
        type: "string"
      topicPreviews:
        type: "array"
        items:
          $ref: "#/definitions/TopicPreview"
      userIds:
        type: "array"
        items:
          type: "string"
  MODELca4fe6:
    type: "object"
    required:
    - "deviceIds"
    properties:
      deviceIds:
        type: "array"
        items:
          type: "string"
          minLength: 1
  Merchants:
    type: "array"
    items:
      $ref: "#/definitions/Merchant"
  ArrayOfBooking:
    type: "array"
    items:
      $ref: "#/definitions/Booking"
  MODEL5b837d:
    type: "object"
    required:
    - "content"
    - "subject"
    properties:
      subject:
        type: "string"
        minLength: 1
      content:
        type: "string"
        minLength: 1
  TopicPreview:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      authorId:
        type: "string"
  MODELe1fd4a:
    type: "object"
    required:
    - "apiKey"
    - "webViewUrl"
    properties:
      webViewUrl:
        type: "string"
      apiKey:
        type: "string"
  Profile:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Username"
      firstName:
        type: "string"
        description: "User first name"
      lastName:
        type: "string"
        description: "User last name"
      email:
        type: "string"
        description: "User email"
      phone:
        type: "string"
        description: "User phone number"
      jobTitle:
        type: "string"
        description: "User job title"
      workingHours:
        type: "string"
        description: "User working hours"
      avatar:
        $ref: "#/definitions/Picture"
  MODEL65471a:
    type: "object"
    properties:
      uuid:
        type: "string"
        maxLength: 36
      major:
        type: "integer"
        minimum: 0.0
        maximum: 65535.0
      minor:
        type: "integer"
        minimum: 0.0
        maximum: 65535.0
      actionId:
        type: "string"
        maxLength: 36
      pointTypeId:
        type: "string"
        maxLength: 36
      location:
        type: "object"
        properties: {}
  MODEL747e86:
    type: "object"
    required:
    - "isDisabled"
    properties:
      isDisabled:
        type: "boolean"
  CafeOrderDetailsViewModel:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Order identifier"
      customer:
        type: "object"
        properties:
          id:
            type: "string"
            description: "User identifier"
          name:
            type: "string"
          email:
            type: "string"
          phone:
            type: "string"
      charge:
        type: "object"
        properties:
          total:
            type: "integer"
          subtotal:
            type: "integer"
          tax:
            type: "integer"
      payment:
        type: "object"
        properties:
          id:
            type: "string"
            description: "Payment identifier"
          transactionId:
            type: "string"
          details:
            type: "string"
      timestampCreated:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CafeOrderItem"
  MODELb60546:
    type: "object"
    required:
    - "isReceivingInvitationDenied"
    - "roles"
    - "tenant"
    properties:
      tenant:
        type: "object"
        properties:
          id:
            type: "string"
            minLength: 1
        required:
        - "id"
      roles:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
            name:
              type: "string"
            resourceType:
              type: "string"
              enum:
              - "landlord"
              - "property"
              - "tenant"
              - "vendor"
          required:
          - "id"
          - "name"
      isReceivingInvitationDenied:
        type: "boolean"
  MODELb9031a:
    type: "object"
    required:
    - "payload"
    properties:
      payload:
        type: "object"
        properties: {}
  ArrayOfGroup:
    type: "array"
    items:
      $ref: "#/definitions/Group"
  MODELe92290:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        format: "email"
        maxLength: 255
  Merchant:
    type: "object"
    properties:
      name:
        type: "string"
      url:
        type: "string"
  BookingInvite:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Booking identifier"
      user:
        $ref: "#/definitions/User"
  MODEL811ad0:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "jobs"
    - "lastName"
    - "phone"
    properties:
      firstName:
        type: "string"
        maxLength: 255
      lastName:
        type: "string"
        maxLength: 255
      email:
        type: "string"
        format: "email"
        maxLength: 255
      phone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
      jobs:
        type: "array"
  Property:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Property identifier"
      name:
        type: "string"
        description: "property name"
      country:
        type: "string"
        description: "property contry"
      state:
        type: "string"
        description: "property state"
      city:
        type: "string"
        description: "property city"
      coordinates:
        type: "array"
        description: "property coordinates [lat, long]"
        items:
          type: "string"
      timeZone:
        type: "string"
        description: "property time zone"
      email:
        type: "string"
        description: "property email"
      phone:
        type: "string"
        description: "property phone number"
      vendors:
        type: "array"
        description: "Vendor identifiers located within a property"
        items:
          type: "string"
      propertyTax:
        type: "string"
        description: "Sales tax for the property"
  MODEL681cfe:
    type: "object"
    required:
    - "abbreviation"
    - "floor"
    - "maxAttendees"
    - "minAttendees"
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      abbreviation:
        type: "string"
        minLength: 1
        maxLength: 255
      floor:
        type: "string"
        minLength: 1
        maxLength: 255
      minAttendees:
        type: "integer"
        minimum: 0.0
        maximum: 10000.0
      maxAttendees:
        type: "integer"
        minimum: 0.0
        maximum: 10000.0
  UserMinInfo:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      avatar:
        type: "string"
      jobTitle:
        type: "string"
  SpacePackage:
    type: "object"
  MODELa967bf:
    type: "object"
    required:
    - "payload"
    properties:
      payload:
        type: "object"
        properties: {}
  MODELf2e024: {}
  UserCard:
    type: "object"
    properties:
      userId:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      propertyName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      notes:
        type: "string"
  ArrayOfOrderViewModel:
    type: "array"
    items:
      $ref: "#/definitions/OrderViewModel"
  ArrayOfBeaconPoint:
    type: "array"
    items:
      $ref: "#/definitions/BeaconPoint"
  Event:
    type: "object"
    properties:
      id:
        type: "string"
      shortName:
        type: "string"
      fullName:
        type: "string"
      imageUrl:
        type: "string"
      description:
        type: "string"
      date:
        type: "integer"
      price:
        type: "integer"
      place:
        type: "string"
      minAttendees:
        type: "integer"
      maxAttendees:
        type: "integer"
      participantIds:
        type: "array"
        items:
          type: "string"
      status:
        type: "string"
      contentCategory:
        type: "string"
      isFavourite:
        type: "boolean"
  MODELb0b075:
    type: "object"
    required:
    - "attendeeIds"
    properties:
      attendeeIds:
        type: "array"
        items:
          type: "string"
          minLength: 1
  ContentCategory:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      imageUrl:
        type: "string"
      isFavourite:
        type: "boolean"
  MODELf5db:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Card id"
      deleted:
        type: "boolean"
        description: "Delete flag"
    description: "Card delete confirmation"
  MODEL8375dc:
    type: "object"
    required:
    - "phone"
    - "workingHours"
    properties:
      phone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
      workingHours:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
              minLength: 1
            weekDays:
              type: "integer"
              minimum: 1.0
              maximum: 127.0
            startTime:
              type: "integer"
              minimum: 0.0
              maximum: 86400.0
            endTime:
              type: "integer"
              minimum: 0.0
              maximum: 86400.0
      questions:
        type: "array"
        items:
          type: "string"
  MODELafb641:
    type: "object"
    required:
    - "isDisabled"
    - "publicKey"
    - "secretKey"
    properties:
      isDisabled:
        type: "boolean"
      publicKey:
        type: "string"
      secretKey:
        type: "string"
  MODELb7e63c:
    type: "object"
    required:
    - "interests"
    properties:
      interests:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
            name:
              type: "string"
            imageUrl:
              type: "string"
            isFavourite:
              type: "boolean"
          required:
          - "id"
          - "imageUrl"
          - "isFavourite"
          - "name"
  MODEL3c2771:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
  MODELcecf3c:
    type: "object"
    required:
    - "contentCategory"
    - "date"
    - "description"
    - "fullName"
    - "imageUrl"
    - "maxAttendees"
    - "minAttendees"
    - "place"
    - "price"
    - "shortName"
    - "status"
    properties:
      status:
        type: "string"
      contentCategory:
        type: "string"
      imageUrl:
        type: "string"
      shortName:
        type: "string"
      fullName:
        type: "string"
      description:
        type: "string"
      minAttendees:
        type: "integer"
        minimum: 0.0
      maxAttendees:
        type: "integer"
        minimum: 0.0
      date:
        type: "integer"
        minimum: 0.0
      price:
        type: "integer"
        minimum: 0.0
      place:
        type: "string"
  MODEL5dd157:
    type: "object"
    required:
    - "interests"
    properties:
      interests:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
            name:
              type: "string"
            imageUrl:
              type: "string"
            isFavourite:
              type: "boolean"
          required:
          - "id"
          - "imageUrl"
          - "isFavourite"
          - "name"
  MODEL63913f:
    type: "object"
    properties:
      firstName:
        type: "string"
        minLength: 1
        maxLength: 255
      lastName:
        type: "string"
        minLength: 1
        maxLength: 255
      phone:
        type: "string"
        pattern: "^[1-9]\\d{10,14}$"
      jobTitle:
        type: "string"
        maxLength: 255
      workingHours:
        type: "string"
        maxLength: 255
  MODELffac36:
    type: "object"
    required:
    - "address"
    - "businessType"
    - "companyName"
    - "contactPhone"
    - "email"
    properties:
      companyName:
        type: "string"
        minLength: 1
        maxLength: 255
      contactPhone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
      email:
        type: "string"
        format: "email"
        maxLength: 255
      address:
        type: "string"
        minLength: 1
        maxLength: 255
      businessType:
        type: "string"
        minLength: 1
        maxLength: 255
  CafeOrderItem:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      variations:
        type: "array"
        items:
          type: "string"
      options:
        type: "array"
        items:
          type: "string"
      comments:
        type: "string"
      quantity:
        type: "integer"
      price:
        type: "integer"
  InvitationToken:
    type: "object"
    properties:
      invitationToken:
        type: "string"
  PaymentHouseAccountConfiguration:
    type: "object"
    properties:
      isDisabled:
        type: "boolean"
        description: "Means whether payment method is disabled"
      dailySpendingLimit:
        type: "integer"
        description: "Daily Spending Limit"
  BeaconPoint:
    type: "object"
    properties:
      id:
        type: "string"
      uuid:
        type: "string"
      major:
        type: "integer"
      minor:
        type: "integer"
      pointTypeId:
        type: "string"
      pointTypeName:
        type: "string"
      location:
        type: "object"
        properties: {}
  ArrayOfMODEL43f423:
    type: "array"
    items:
      type: "object"
      properties:
        cardType:
          type: "string"
          enum:
          - "booking"
          - "greeting"
          - "message"
          - "custom"
          - "property_event"
          - "special_cafe_offer"
        configuration:
          type: "object"
          properties: {}
      required:
      - "cardType"
      - "configuration"
  ConciergeChatInfo:
    type: "object"
    properties:
      chatUniqueName:
        type: "string"
      token:
        type: "string"
      identity:
        type: "string"
  Resource:
    type: "object"
    properties:
      resourceId:
        type: "string"
      type:
        type: "string"
    description: "Resource"
  ArrayOfEvent:
    type: "array"
    items:
      $ref: "#/definitions/Event"
  MODELce3fe6:
    type: "object"
    required:
    - "address"
    - "businessType"
    - "companyName"
    - "contactPhone"
    - "email"
    properties:
      companyName:
        type: "string"
        minLength: 1
        maxLength: 255
      contactPhone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
      email:
        type: "string"
        format: "email"
        maxLength: 255
      address:
        type: "string"
        minLength: 1
        maxLength: 255
      businessType:
        type: "string"
        minLength: 1
        maxLength: 255
  ArrayOfBeacon:
    type: "array"
    items:
      $ref: "#/definitions/Beacon"
  MODELdaa885:
    type: "object"
    required:
    - "interests"
    properties:
      interests:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "string"
            name:
              type: "string"
            imageUrl:
              type: "string"
            isFavourite:
              type: "boolean"
          required:
          - "id"
          - "imageUrl"
          - "isFavourite"
          - "name"
  MODELf73a7f:
    type: "object"
    required:
    - "read"
    properties:
      read:
        type: "boolean"
  MODEL268095:
    type: "object"
    required:
    - "name"
    - "vendorType"
    properties:
      name:
        type: "string"
        minLength: 1
        maxLength: 255
      vendorType:
        type: "string"
        enum:
        - "cafe"
        - "ritual"
  Role:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
  RoleArray:
    type: "array"
    items:
      $ref: "#/definitions/Role"
  SecurityUser:
    type: "object"
  MODEL48a1cc:
    type: "object"
    properties:
      firstName:
        type: "string"
        minLength: 1
        maxLength: 255
      lastName:
        type: "string"
        minLength: 1
        maxLength: 255
      phone:
        type: "string"
        pattern: "^\\+[1-9]\\d{10,14}$"
      jobTitle:
        type: "string"
        maxLength: 255
      workingHours:
        type: "string"
        maxLength: 255
  BookingConfirmation:
    type: "object"
    properties:
      orderId:
        type: "string"
      bookingId:
        type: "string"
      userId:
        type: "string"
      status:
        type: "string"
  Stats:
    type: "array"
    items:
      type: "object"
      properties:
        date:
          type: "string"
        count:
          type: "integer"
  ArrayOfContentCategory:
    type: "array"
    items:
      $ref: "#/definitions/ContentCategory"
  MODELfee687:
    type: "object"
    required:
    - "mobileId"
    properties:
      mobileId:
        type: "string"
  MODEL1f0770:
    type: "object"
    required:
    - "mobileId"
    properties:
      mobileId:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      jobTitle:
        type: "string"
      workingHours:
        type: "string"
      roles:
        type: "array"
        items:
          $ref: "#/definitions/Role"
  Message:
    type: "object"
    properties:
      id:
        type: "string"
      from:
        $ref: "#/definitions/User"
      subject:
        type: "string"
      content:
        type: "string"
      read:
        type: "boolean"
  MODEL62ab3b:
    type: "object"
    required:
    - "read"
    properties:
      read:
        type: "boolean"
  MODEL50521e:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        enum:
        - "new"
        - "in_progress"
        - "complete"
        - "rejected"
  ArrayOfCard:
    type: "array"
    description: "Array of all user cards"
    items:
      $ref: "#/definitions/Card"
  MODELd85bde:
    type: "object"
    required:
    - "bookingConfirmation"
    - "contactInfo"
    - "theme"
    properties:
      theme:
        type: "object"
        properties:
          description:
            type: "string"
          primaryImage:
            type: "string"
          images:
            type: "array"
            items:
              type: "string"
          options:
            type: "array"
            items:
              type: "object"
              properties:
                title:
                  type: "string"
                image:
                  type: "string"
                description:
                  type: "string"
              required:
              - "description"
              - "image"
              - "title"
        required:
        - "description"
        - "images"
        - "options"
        - "primaryImage"
      contactInfo:
        type: "object"
        properties:
          message:
            type: "string"
        required:
        - "message"
      bookingConfirmation:
        type: "object"
        properties:
          message:
            type: "string"
        required:
        - "message"
  MODEL252649:
    type: "object"
  SecurityConfig:
    type: "object"
    properties:
      customerId:
        type: "string"
      defaultPartNumber:
        type: "string"
      clientId:
        type: "string"
      clientSecret:
        type: "string"
      clientIdPki:
        type: "string"
  BeaconInfo:
    type: "object"
    properties:
      updateInterval:
        type: "integer"
  VendorMenu:
    type: "array"
    description: "Vendor menu"
    items:
      type: "object"
      properties: {}
  ResourceUserArray:
    type: "array"
    items:
      $ref: "#/definitions/ResourceUser"
  MODEL86e8f2:
    type: "object"
    required:
    - "propertyId"
    properties:
      propertyId:
        type: "string"
  PaymentStripeConfiguration:
    type: "object"
    properties:
      isDisabled:
        type: "boolean"
        description: "Means whether payment method is disabled"
      publicKey:
        type: "string"
        description: "Public key"
      secretKey:
        type: "string"
        description: "Secret key"
  ArrayOfMODEL5deec2:
    type: "array"
    items:
      type: "object"
      properties:
        propertyId:
          type: "string"
      required:
      - "propertyId"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  Service:
    type: "object"
    properties:
      title:
        type: "string"
        description: "Module title"
      subTitle:
        type: "string"
        description: "Module sub title"
      type:
        type: "string"
        description: "Module type"
      images:
        type: "object"
        description: "Module images"
        properties:
          backgroundImage:
            $ref: "#/definitions/Picture"
          menuIcon:
            $ref: "#/definitions/Picture"
  ArrayOfMessage:
    type: "array"
    items:
      $ref: "#/definitions/Message"
  ArrayOfMODEL53d580:
    type: "array"
    items:
      type: "object"
      properties:
        email:
          type: "string"
          format: "email"
          maxLength: 255
        tenant:
          type: "object"
          properties:
            id:
              type: "string"
              minLength: 1
          required:
          - "id"
        roles:
          type: "array"
          items:
            type: "object"
            properties:
              id:
                type: "string"
              name:
                type: "string"
              resourceType:
                type: "string"
                enum:
                - "landlord"
                - "property"
                - "tenant"
                - "vendor"
            required:
            - "id"
            - "name"
            - "resourceType"
        isReceivingInvitationDenied:
          type: "boolean"
      required:
      - "email"
      - "isReceivingInvitationDenied"
      - "roles"
      - "tenant"
  PermissionArray:
    type: "array"
    description: "Permission array"
    items:
      $ref: "#/definitions/Permission"
  Contact:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      user:
        $ref: "#/definitions/UserMinInfo"
  MODEL30d365:
    type: "object"
    required:
    - "basicDuration"
    - "endTime"
    - "minBookingDuration"
    - "rate"
    - "startTime"
    properties:
      rate:
        type: "integer"
        minimum: 0.0
        maximum: 2.147483647E9
      basicDuration:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      minBookingDuration:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      startTime:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      endTime:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
  MODELa7ae0a:
    type: "object"
    required:
    - "contentCategory"
    - "date"
    - "description"
    - "fullName"
    - "imageUrl"
    - "maxAttendees"
    - "minAttendees"
    - "place"
    - "price"
    - "shortName"
    - "status"
    properties:
      status:
        type: "string"
      contentCategory:
        type: "string"
      imageUrl:
        type: "string"
      shortName:
        type: "string"
      fullName:
        type: "string"
      description:
        type: "string"
      minAttendees:
        type: "integer"
        minimum: 0.0
      maxAttendees:
        type: "integer"
        minimum: 0.0
      date:
        type: "integer"
        minimum: 0.0
      price:
        type: "integer"
        minimum: 0.0
      place:
        type: "string"
  ArrayOfBookingInvite:
    type: "array"
    items:
      $ref: "#/definitions/BookingInvite"
  MODEL757582:
    type: "object"
    required:
    - "mobileId"
    properties:
      mobileId:
        type: "string"
  BookingAttendee:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Booking identifier"
      attending:
        type: "boolean"
        description: "Flag means whether user is present for the booking"
      user:
        $ref: "#/definitions/User"
  ArrayOfContact:
    type: "array"
    items:
      $ref: "#/definitions/Contact"
  CafeOrderViewModel:
    type: "object"
    properties:
      orderId:
        type: "string"
        description: "Order identifier"
      status:
        type: "string"
        description: "Order status"
  ResourceUser:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      jobTitle:
        type: "string"
      workingHours:
        type: "string"
      roles:
        type: "array"
        items:
          $ref: "#/definitions/Role"
      securityUser:
        $ref: "#/definitions/SecurityUser"
  MODEL03f6b4:
    type: "object"
    required:
    - "details"
    - "endDate"
    - "endTime"
    - "name"
    - "participationPrice"
    - "place"
    - "promotionLevel"
    - "startDate"
    - "startTime"
    properties:
      name:
        type: "string"
        minLength: 1
      startDate:
        type: "integer"
        minimum: 0.0
      endDate:
        type: "integer"
        minimum: 0.0
      startTime:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      endTime:
        type: "integer"
        minimum: 0.0
        maximum: 86400.0
      participationPrice:
        type: "integer"
        minimum: 0.0
      promotionLevel:
        type: "integer"
      place:
        type: "object"
        properties:
          name:
            type: "string"
            minLength: 1
          coordinates:
            type: "object"
            properties:
              latitude:
                type: "number"
                minimum: -90.0
                maximum: 90.0
              longitude:
                type: "number"
                minimum: -180.0
                maximum: 180.0
            required:
            - "latitude"
            - "longitude"
          addressLine1:
            type: "string"
            minLength: 1
        required:
        - "addressLine1"
        - "coordinates"
        - "name"
      details:
        type: "object"
        properties:
          images:
            type: "array"
            items:
              type: "object"
              properties:
                url:
                  type: "string"
                scale:
                  type: "string"
              required:
              - "scale"
              - "url"
          thumbnail:
            type: "string"
          features:
            type: "array"
            items:
              type: "object"
              properties:
                title:
                  type: "string"
                description:
                  type: "string"
              required:
              - "description"
              - "title"
        required:
        - "features"
        - "images"
  MODEL396417:
    type: "object"
    required:
    - "deviceId"
    properties:
      deviceId:
        type: "string"
        description: "Apple vendor id"
        minLength: 1
  MODELa2b95f:
    type: "object"
    required:
    - "accentColor"
    - "backgroundColor"
    - "images"
    - "services"
    - "topBarColor"
    properties:
      images:
        type: "object"
        properties:
          topBarImage:
            type: "object"
            properties:
              url:
                type: "string"
              scale:
                type: "string"
            required:
            - "scale"
            - "url"
          backgroundImage:
            type: "object"
            properties:
              url:
                type: "string"
              scale:
                type: "string"
            required:
            - "scale"
            - "url"
          launchImage:
            type: "object"
            properties:
              url:
                type: "string"
              scale:
                type: "string"
            required:
            - "scale"
            - "url"
        required:
        - "backgroundImage"
        - "launchImage"
        - "topBarImage"
      accentColor:
        type: "string"
        pattern: "^#[0-f]{6}$"
      backgroundColor:
        type: "string"
        pattern: "^#[0-f]{6}$"
      topBarColor:
        type: "string"
        pattern: "^#[0-f]{6}$"
      services:
        type: "array"
        items:
          type: "object"
          properties:
            title:
              type: "string"
            disable:
              type: "boolean"
            visibleInSideMenu:
              type: "boolean"
            visibleInMainMenu:
              type: "boolean"
            visibleInBottomBar:
              type: "boolean"
            images:
              type: "object"
              properties:
                menuIcon:
                  type: "object"
                  properties:
                    url:
                      type: "string"
                    scale:
                      type: "string"
                  required:
                  - "scale"
                  - "url"
                backgroundImage:
                  type: "object"
                  properties:
                    url:
                      type: "string"
                    scale:
                      type: "string"
                  required:
                  - "scale"
                  - "url"
                bottomBarImage:
                  type: "object"
                  properties:
                    url:
                      type: "string"
                    scale:
                      type: "string"
                  required:
                  - "scale"
                  - "url"
              required:
              - "backgroundImage"
            type:
              type: "string"
            subTitle:
              type: "string"
          required:
          - "disable"
          - "images"
          - "subTitle"
          - "title"
          - "type"
          - "visibleInBottomBar"
          - "visibleInMainMenu"
          - "visibleInSideMenu"
x-amazon-apigateway-documentation:
  version: "2.01"
  createdDate: "2017-12-17T23:53:27Z"
  documentationParts:
  - location:
      type: "MODEL"
      name: "ArrayOfCard"
    properties:
      description: "Array of all user cards"
  - location:
      type: "MODEL"
      name: "Booking.end"
    properties:
      description: "Reservation end datetime in unix timestamp format"
  - location:
      type: "MODEL"
      name: "Booking.start"
    properties:
      description: "Reservation start datetime in unix timestamp format"
  - location:
      type: "MODEL"
      name: "BookingAttendee.attending"
    properties:
      description: "Flag means whether user is present for the booking"
  - location:
      type: "MODEL"
      name: "BookingAttendee.id"
    properties:
      description: "Booking identifier"
  - location:
      type: "MODEL"
      name: "BookingInvite.id"
    properties:
      description: "Booking identifier"
  - location:
      type: "MODEL"
      name: "CafeOrderDetailsViewModel.customer.id"
    properties:
      description: "User identifier"
  - location:
      type: "MODEL"
      name: "CafeOrderDetailsViewModel.id"
    properties:
      description: "Order identifier"
  - location:
      type: "MODEL"
      name: "CafeOrderDetailsViewModel.payment.id"
    properties:
      description: "Payment identifier"
  - location:
      type: "MODEL"
      name: "CafeOrderViewModel.orderId"
    properties:
      description: "Order identifier"
  - location:
      type: "MODEL"
      name: "CafeOrderViewModel.status"
    properties:
      description: "Order status"
  - location:
      type: "MODEL"
      name: "Card.brand"
    properties:
      description: "Card brand"
  - location:
      type: "MODEL"
      name: "Card.id"
    properties:
      description: "Card id"
  - location:
      type: "MODEL"
      name: "Card.isDefault"
    properties:
      description: "Whether the card is default for some module"
  - location:
      type: "MODEL"
      name: "Card.last4"
    properties:
      description: "Last 4 digits of card"
  - location:
      type: "MODEL"
      name: "Card.module"
    properties:
      description: "Module name for which the card is default"
  - location:
      type: "MODEL"
      name: "CsvContent.content"
    properties:
      description: "Csv-formatted property user table"
  - location:
      type: "MODEL"
      name: "MODEL32b93c.applicationName"
    properties:
      description: "AWS APNS Application name"
  - location:
      type: "MODEL"
      name: "MODEL32b93c.deviceId"
    properties:
      description: "Apple vendor id"
  - location:
      type: "MODEL"
      name: "MODEL32b93c.deviceMode"
    properties:
      description: "Not used."
  - location:
      type: "MODEL"
      name: "MODEL32b93c.deviceToken"
    properties:
      description: "Token generated with APNS"
  - location:
      type: "MODEL"
      name: "MODELf4c324.deviceId"
    properties:
      description: "Apple vendor id"
  - location:
      type: "MODEL"
      name: "MODELf5db.deleted"
    properties:
      description: "Delete flag"
  - location:
      type: "MODEL"
      name: "MODELf5db.id"
    properties:
      description: "Card id"
  - location:
      type: "MODEL"
      name: "MODELf5db"
    properties:
      description: "Card delete confirmation"
  - location:
      type: "MODEL"
      name: "OrderViewModel.charge.subtotal"
    properties:
      description: "Subtotal amount of charge"
  - location:
      type: "MODEL"
      name: "OrderViewModel.charge.tax"
    properties:
      description: "Tax amount of charge"
  - location:
      type: "MODEL"
      name: "OrderViewModel.charge.total"
    properties:
      description: "Total amount of charge"
  - location:
      type: "MODEL"
      name: "OrderViewModel.charge"
    properties:
      description: "Cafe order price in cents"
  - location:
      type: "MODEL"
      name: "OrderViewModel.status"
    properties:
      description: "Status means a readiness of order"
  - location:
      type: "MODEL"
      name: "OrderViewModel.subTitle"
    properties:
      description: "Subtitle is the first menu item comma-separated options"
  - location:
      type: "MODEL"
      name: "OrderViewModel.title"
    properties:
      description: "Title is the first menu item title"
  - location:
      type: "MODEL"
      name: "PaymentHouseAccountConfiguration.dailySpendingLimit"
    properties:
      description: "Daily Spending Limit"
  - location:
      type: "MODEL"
      name: "PaymentHouseAccountConfiguration.isDisabled"
    properties:
      description: "Means whether payment method is disabled"
  - location:
      type: "MODEL"
      name: "PaymentStripeConfiguration.isDisabled"
    properties:
      description: "Means whether payment method is disabled"
  - location:
      type: "MODEL"
      name: "PaymentStripeConfiguration.publicKey"
    properties:
      description: "Public key"
  - location:
      type: "MODEL"
      name: "PaymentStripeConfiguration.secretKey"
    properties:
      description: "Secret key"
  - location:
      type: "MODEL"
      name: "Permission.permission"
    properties:
      description: "Permission name"
  - location:
      type: "MODEL"
      name: "Permission"
    properties:
      description: "Permission per resource"
  - location:
      type: "MODEL"
      name: "PermissionArray"
    properties:
      description: "Permission array"
  - location:
      type: "MODEL"
      name: "Picture.id"
    properties:
      description: "Unique identifier for image"
  - location:
      type: "MODEL"
      name: "Picture.scale"
    properties:
      description: "Image scale"
  - location:
      type: "MODEL"
      name: "Picture.url"
    properties:
      description: "Image URL"
  - location:
      type: "MODEL"
      name: "Profile.email"
    properties:
      description: "User email"
  - location:
      type: "MODEL"
      name: "Profile.firstName"
    properties:
      description: "User first name"
  - location:
      type: "MODEL"
      name: "Profile.jobTitle"
    properties:
      description: "User job title"
  - location:
      type: "MODEL"
      name: "Profile.lastName"
    properties:
      description: "User last name"
  - location:
      type: "MODEL"
      name: "Profile.phone"
    properties:
      description: "User phone number"
  - location:
      type: "MODEL"
      name: "Profile.username"
    properties:
      description: "Username"
  - location:
      type: "MODEL"
      name: "Profile.workingHours"
    properties:
      description: "User working hours"
  - location:
      type: "MODEL"
      name: "Property.city"
    properties:
      description: "property city"
  - location:
      type: "MODEL"
      name: "Property.coordinates"
    properties:
      description: "property coordinates [lat, long]"
  - location:
      type: "MODEL"
      name: "Property.country"
    properties:
      description: "property contry"
  - location:
      type: "MODEL"
      name: "Property.email"
    properties:
      description: "property email"
  - location:
      type: "MODEL"
      name: "Property.id"
    properties:
      description: "Property identifier"
  - location:
      type: "MODEL"
      name: "Property.name"
    properties:
      description: "property name"
  - location:
      type: "MODEL"
      name: "Property.phone"
    properties:
      description: "property phone number"
  - location:
      type: "MODEL"
      name: "Property.propertyTax"
    properties:
      description: "Sales tax for the property"
  - location:
      type: "MODEL"
      name: "Property.state"
    properties:
      description: "property state"
  - location:
      type: "MODEL"
      name: "Property.timeZone"
    properties:
      description: "property time zone"
  - location:
      type: "MODEL"
      name: "Property.vendors"
    properties:
      description: "Vendor identifiers located within a property"
  - location:
      type: "MODEL"
      name: "PropertyArray"
    properties:
      description: "Available for user properties"
  - location:
      type: "MODEL"
      name: "PropertyConfig.accentColor"
    properties:
      description: "RGB color represented as 8 hex digits"
  - location:
      type: "MODEL"
      name: "PropertyConfig.backgroundColor"
    properties:
      description: "RGB color represented as 8 hex digits"
  - location:
      type: "MODEL"
      name: "PropertyConfig.images"
    properties:
      description: "Property images"
  - location:
      type: "MODEL"
      name: "PropertyConfig.services"
    properties:
      description: "Ordered services descriptors array"
  - location:
      type: "MODEL"
      name: "PropertyConfig.topBarColor"
    properties:
      description: "RGB color represented as 8 hex digits"
  - location:
      type: "MODEL"
      name: "PropertyConfig"
    properties:
      description: "Property specific user interface data"
  - location:
      type: "MODEL"
      name: "Resource"
    properties:
      description: "Resource"
  - location:
      type: "MODEL"
      name: "Service.images"
    properties:
      description: "Module images"
  - location:
      type: "MODEL"
      name: "Service.subTitle"
    properties:
      description: "Module sub title"
  - location:
      type: "MODEL"
      name: "Service.title"
    properties:
      description: "Module title"
  - location:
      type: "MODEL"
      name: "Service.type"
    properties:
      description: "Module type"
  - location:
      type: "MODEL"
      name: "VendorMenu"
    properties:
      description: "Vendor menu"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/event"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/group"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/interest"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/community/user"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}/configuration"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/feed/property/{propertyId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.1/profile"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}/like"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/event"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/group"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/interest"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1.2/community/property/{propertyId}/user"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/password"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/auth/retrieveLink"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/beacon/devices"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking/{bookingId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/booking"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/package"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space/{spaceId}/price"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/property/{propertyId}/space"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees/notify"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/attendees"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite/{inviteIds}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}/invite"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking/{bookingId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/booking"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/cafe/property/{propertyId}/vendor/{vendorId}/menu"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/chat/token/{channelType}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event/{eventId}/like"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/event"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/group"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/interest"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/community/user"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/chat/token/{channelType}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/session/{chatUniqueName}/message/{messageId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/chat/{channelType}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/info"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/concierge/property/{propertyId}/user/{userId}/card"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}/userState"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event/{eventId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/event"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share/{propertyId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}/share"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event/{eventId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/event/property/{eventPropertyId}/event"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/feed"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord/{landlordId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/landlord"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/resource/{resourceType}/{resourceId}/multicast"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message/{messageId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/message"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/status"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/notification/subscription"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking/{orderId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/booking"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "POST"
      statusCode: "201"
    properties:
      description: "201 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/cafe"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/details"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}/order/{orderId}/status"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/order/vendor/{vendorId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/property/{propertyId}/stripe/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/tenant/{tenantId}/houseAccount/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider/{providerId}/paymentMethod/{paymentMethodId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/payment/{propertyId}/provider"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/permission"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/role"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/export"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}/invitation"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user/{userId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/permission/{resourceType}/{resourceId}/user"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/profile"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beacon"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint/{beaconPointId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/beaconpoint"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact/{contactId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/contact"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space/{spaceId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}/space"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property/{propertyId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/property"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/resource"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "404"
    properties:
      description: "404 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "424"
    properties:
      description: "424 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/invitation"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "POST"
      statusCode: "404"
    properties:
      description: "404 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/mobileId"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/invitation"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/mobileId"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/hid/publicConfig"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/invitation"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/security/property/{propertyId}/mobileId"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/static/{resourceType}/{resourceId}/uploadPermission"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/cafeOrders"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/doors"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/rooms"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/stats/{resourceType}/{resourceId}/users"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant/{tenantId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/tenant"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/cafe/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/catalog"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/config"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}/ritual/publicConfig"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "DELETE"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "DELETE"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "DELETE"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "DELETE"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "DELETE"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "PUT"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "PUT"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "PUT"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "PUT"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor/{vendorId}"
      method: "PUT"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "GET"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "GET"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "GET"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "GET"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "GET"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "OPTIONS"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "OPTIONS"
      statusCode: "500"
    properties:
      description: "500 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "POST"
      statusCode: "200"
    properties:
      description: "200 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "POST"
      statusCode: "401"
    properties:
      description: "401 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "POST"
      statusCode: "403"
    properties:
      description: "403 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "POST"
      statusCode: "422"
    properties:
      description: "422 response"
  - location:
      type: "RESPONSE"
      path: "/v1/vendor"
      method: "POST"
      statusCode: "500"
    properties:
      description: "500 response"